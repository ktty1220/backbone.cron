// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Backbone.Cron = (function() {
    function Cron(owner, crontabs, autostart) {
      var ct, label, parseCrontab, seqArray,
        _this = this;
      this.owner = owner;
      if (autostart == null) {
        autostart = true;
      }
      this._makeunit = __bind(this._makeunit, this);
      this.off = __bind(this.off, this);
      this.on = __bind(this.on, this);
      this.stop = __bind(this.stop, this);
      this.start = __bind(this.start, this);
      seqArray = function(from, to) {
        return _.map(new Array(to - from + 1).join().split(','), function(v, i, a) {
          return i + from;
        });
      };
      parseCrontab = function(crontab) {
        var ctArray;
        ctArray = _.map(crontab.split(/\s+/), function(v, i, a) {
          if (i === 6 || v === '*') {
            return v;
          }
          v = v.replace(/(\d+)-(\d+)/g, function(vm, vf, vt) {
            return seqArray(Number(vf), Number(vt)).join();
          });
          v = v.replace(/\*\/(\d+)/g, function(vm, vi) {
            return Number(vi) * -1;
          });
          return _.map(v.split(','), function(vv, vi, va) {
            return Number(vv);
          }).sort();
        });
        return {
          unit: _this._makeunit(ctArray),
          exec: ctArray[6]
        };
      };
      this.items = {};
      for (label in crontabs) {
        ct = crontabs[label];
        this.items[label] = _.extend(parseCrontab(ct), {
          crontab: ct,
          pause: false
        });
      }
      this.owner.bind('remove', function() {
        if (_this.owner.model == null) {
          return _this.stop();
        }
      });
      if (autostart) {
        this.start();
      }
    }

    Cron.prototype.start = function() {
      var _this = this;
      this.unixtime = parseInt(new Date() / 1000, 10);
      return this.timer = setInterval(function() {
        var d, item, label, now, _ref, _results;
        d = new Date(++_this.unixtime * 1000);
        now = _this._makeunit([d.getSeconds(), d.getMinutes(), d.getHours(), d.getDate(), d.getMonth() + 1, d.getDay()]);
        _ref = _this.items;
        _results = [];
        for (label in _ref) {
          item = _ref[label];
          if (!item.pause) {
            if (_.every(item.unit, function(v, k, o) {
              return (v != null) && (v === '*' || _.some(v, function(vv, vi, va) {
                if (vv < 0) {
                  return now[k] % (vv * -1) === 0;
                } else {
                  return vv === now[k];
                }
              }));
            })) {
              _results.push(_this.owner[item.exec](label, d));
            } else {
              _results.push(void 0);
            }
          }
        }
        return _results;
      }, 1000);
    };

    Cron.prototype.stop = function() {
      return clearInterval(this.timer);
    };

    Cron.prototype.on = function(label) {
      return this.items[label].pause = false;
    };

    Cron.prototype.off = function(label) {
      return this.items[label].pause = true;
    };

    Cron.prototype._makeunit = function(array) {
      return _.object(['second', 'minute', 'hour', 'day', 'month', 'weekday'], array);
    };

    return Cron;

  })();

}).call(this);
